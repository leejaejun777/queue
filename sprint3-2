#include <iostream>
#include <Windows.h>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <numeric>

using namespace std;

int main() {
    vector<int> queue;
    int NI = 20;
    int NO = 10;
    int capacity = 100, lost = 0;
    int NofPackets[120] = { 0 };
    int itime = 0, x, T = 1;
    while (itime < 120) {
        Sleep(T * 1000);
        itime += T;

        int ni = rand() % NI;
        if (capacity < queue.size() + ni) {
            lost += queue.size() + ni - capacity;
            ni = capacity - queue.size();
        }
        for (int i = 0; i < ni; i++) {
            queue.push_back(rand() % 20);
        }
        int no = rand() % NO;
        for (int i = 0; i < no; i++) {
            if (queue.size() != 0) {
                queue.erase(queue.begin());
            }
        }
        NofPackets[itime] = queue.size();
        cout << NofPackets[itime] << endl;
    }

    ofstream outFile("packets.txt");
    if (outFile.is_open()) {
        for (int i = 0; i < 120; i++) {
            outFile << NofPackets[i] << endl;
        }
        outFile.close();
    }
    else
        return 999;

    int sum = accumulate(NofPackets, NofPackets + 120, 0);
    double average = sum / 120;
    int max = *max_element(NofPackets, NofPackets + 120);

    cout << "average: " << average << endl;
    cout << "max: " << max << endl;

    return 0;
}
